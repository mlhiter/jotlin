generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                  String       @id @default(uuid())
  email               String       @unique
  password            String?
  createdAt           DateTime     @default(now())
  updatedAt           DateTime     @updatedAt
  provider            String?      @default("credentials")
  providerAccountId   String?
  refreshToken        String?      @unique
  accessToken         String?      @unique
  expiresAt           DateTime?
  name                String
  image               String?
  emailVerified       Boolean      @default(false)
  documents           Document[]   @relation("UserDocuments")
  invitationsReceived Invitation[] @relation("ReceivedInvitations")
  sessions            Session[]

  @@map("user")
}

model Document {
  id            String                 @id @default(uuid())
  title         String
  content       String?
  icon          String?
  coverImage    String?
  isArchived    Boolean                @default(false)
  isPublished   Boolean                @default(false)
  createdAt     DateTime               @default(now())
  updatedAt     DateTime               @updatedAt
  userId        String
  parentId      String?
  chatId        String?
  chat          Chat?                  @relation("ChatDocuments", fields: [chatId], references: [id])
  parent        Document?              @relation("DocumentHierarchy", fields: [parentId], references: [id])
  children      Document[]             @relation("DocumentHierarchy")
  user          User                   @relation("UserDocuments", fields: [userId], references: [id])
  collaborators DocumentCollaborator[]
  comments      Comment[]

  @@index([userId])
  @@index([parentId])
  @@index([chatId])
}

model DocumentCollaborator {
  id         String   @id @default(uuid())
  documentId String
  userEmail  String
  createdAt  DateTime @default(now())
  document   Document @relation(fields: [documentId], references: [id])

  @@unique([documentId, userEmail])
  @@index([userEmail])
}

model Invitation {
  id                String   @id @default(uuid())
  documentId        String
  userEmail         String
  collaboratorEmail String
  isAccepted        Boolean  @default(false)
  isReplied         Boolean  @default(false)
  isValid           Boolean  @default(true)
  createdAt         DateTime @default(now())
  collaborator      User     @relation("ReceivedInvitations", fields: [collaboratorEmail], references: [email])
  user              User     @relation("SentInvitations", fields: [userEmail], references: [email])

  @@index([documentId])
  @@index([userEmail])
  @@index([collaboratorEmail])
}

model Session {
  id        String   @id
  expiresAt DateTime
  token     String   @unique
  createdAt DateTime
  updatedAt DateTime
  ipAddress String?
  userAgent String?
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("session")
}

model Account {
  id                    String    @id
  accountId             String
  providerId            String
  userId                String
  accessToken           String?
  refreshToken          String?
  idToken               String?
  accessTokenExpiresAt  DateTime?
  refreshTokenExpiresAt DateTime?
  scope                 String?
  password              String?
  createdAt             DateTime
  updatedAt             DateTime
  user                  User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("account")
}

model Verification {
  id         String    @id
  identifier String
  value      String
  expiresAt  DateTime
  createdAt  DateTime?
  updatedAt  DateTime?

  @@map("verification")
}

model Comment {
  id        String   @id @default(uuid())
  content   String   @db.Text
  blockId   String   // 评论所在块的ID
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  documentId String
  document   Document @relation(fields: [documentId], references: [id], onDelete: Cascade)
  userId     String
  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([documentId])
  @@index([userId])
}

model Chat {
  id          String     @id @default(uuid())
  title       String
  description String?
  isArchived  Boolean    @default(false)
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
  userId      String
  isDeleted   Boolean    @default(false)
  documents   Document[] @relation("ChatDocuments")
  user        User       @relation("UserChats", fields: [userId], references: [id])
  messages    Message[]  @relation("ChatMessages")

  @@index([userId])
  @@map("chat")
}

model Message {
  id        String   @id @default(uuid())
  content   String
  role      String
  createdAt DateTime @default(now())
  chatId    String
  userId    String
  chat      Chat     @relation("ChatMessages", fields: [chatId], references: [id])
  user      User     @relation("UserMessages", fields: [userId], references: [id])

  @@index([chatId])
  @@index([userId])
  @@map("message")
}
