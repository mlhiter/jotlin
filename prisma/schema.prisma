// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String    @id @default(uuid())
  username      String?
  email         String    @unique
  emailVerified Boolean   @default(false)
  password      String?
  imageUrl      String?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  // Auth fields
  provider          String?   @default("credentials")
  providerAccountId String?
  refreshToken      String?   @unique
  accessToken       String?   @unique
  expiresAt         DateTime?

  // Relations
  documents           Document[]   @relation("UserDocuments")
  invitationsSent     Invitation[] @relation("SentInvitations")
  invitationsReceived Invitation[] @relation("ReceivedInvitations")
  name                String
  image               String?
  sessions            Session[]
  accounts            Account[]
  chats               Chat[]       @relation("UserChats")
  messages            Message[]    @relation("UserMessages")

  @@map("user")
}

model Document {
  id          String   @id @default(uuid())
  title       String
  content     String?  @db.Text
  icon        String?
  coverImage  String?
  isArchived  Boolean  @default(false)
  isPublished Boolean  @default(false)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  userId        String
  user          User                   @relation("UserDocuments", fields: [userId], references: [id])
  parentId      String?
  parent        Document?              @relation("DocumentHierarchy", fields: [parentId], references: [id])
  children      Document[]             @relation("DocumentHierarchy")
  collaborators DocumentCollaborator[]
  chatId        String?
  chat          Chat?                  @relation("ChatDocuments", fields: [chatId], references: [id])

  @@index([userId])
  @@index([parentId])
  @@index([chatId])
}

model DocumentCollaborator {
  id         String   @id @default(uuid())
  documentId String
  document   Document @relation(fields: [documentId], references: [id])
  userEmail  String
  createdAt  DateTime @default(now())

  @@unique([documentId, userEmail])
  @@index([userEmail])
}

model Invitation {
  id                String   @id @default(uuid())
  documentId        String
  userEmail         String // inviter's email
  collaboratorEmail String // invitee's email
  isAccepted        Boolean  @default(false)
  isReplied         Boolean  @default(false)
  isValid           Boolean  @default(true)
  createdAt         DateTime @default(now())

  // Relations
  user         User @relation("SentInvitations", fields: [userEmail], references: [email])
  collaborator User @relation("ReceivedInvitations", fields: [collaboratorEmail], references: [email])

  @@index([documentId])
  @@index([userEmail])
  @@index([collaboratorEmail])
}

model Session {
  id        String   @id
  expiresAt DateTime
  token     String
  createdAt DateTime
  updatedAt DateTime
  ipAddress String?
  userAgent String?
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([token])
  @@map("session")
}

model Account {
  id                    String    @id
  accountId             String
  providerId            String
  userId                String
  user                  User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  accessToken           String?
  refreshToken          String?
  idToken               String?
  accessTokenExpiresAt  DateTime?
  refreshTokenExpiresAt DateTime?
  scope                 String?
  password              String?
  createdAt             DateTime
  updatedAt             DateTime

  @@map("account")
}

model Verification {
  id         String    @id
  identifier String
  value      String
  expiresAt  DateTime
  createdAt  DateTime?
  updatedAt  DateTime?

  @@map("verification")
}

model Chat {
  id          String    @id @default(uuid())
  title       String
  description String?
  isArchived  Boolean   @default(false)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  // Relations
  userId    String
  user      User       @relation("UserChats", fields: [userId], references: [id])
  documents Document[] @relation("ChatDocuments")
  messages  Message[]  @relation("ChatMessages")

  @@index([userId])
  @@map("chat")
}

model Message {
  id        String   @id @default(uuid())
  content   String   @db.Text
  role      String   // 'user' or 'assistant'
  createdAt DateTime @default(now())

  // Relations
  chatId String
  chat   Chat   @relation("ChatMessages", fields: [chatId], references: [id])
  userId String
  user   User   @relation("UserMessages", fields: [userId], references: [id])

  @@index([chatId])
  @@index([userId])
  @@map("message")
}
